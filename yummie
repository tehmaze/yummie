#!/usr/bin/env python

import atexit
import ConfigParser
import fnmatch
import logging
from logging.handlers import RotatingFileHandler, SysLogHandler
import os
import re
import shlex
import subprocess
import string
import sys
import tempfile
import textwrap
import time


class Config(ConfigParser.ConfigParser):
    def __init__(self, filename):
        ConfigParser.ConfigParser.__init__(self)
        self.read([filename])

    def getdefault(self, section, option, default=None):
        try:
            return ConfigParser.ConfigParser.get(self, section, option)
        except ConfigParser.NoOptionError:
            return default


class Yummie(object):
    _re_package = re.compile(r'(?P<package>\S+)\.' +
                             r'(?P<arch>:i[3-6]86|x86_64|noarch)')

    def __init__(self, option, config):
        self.option = option
        self.config = config

        # Setup logging
        self._setup_logging()

        # stderr of the last command
        self.errors = ''
        # List of pending packages
        self.updates = []
        # List of excluded packages
        self.exclude = set([])

        for option in self.config.options('package'):
            if option.startswith('exclude'):
                for package in map(string.strip, self.config.get('package',
                        option).split(',')):
                    self.exclude.add(package)

    def _setup_logging(self):
        method = self.config.getdefault('log', 'method', 'stderr')
        logger = logging.getLogger()

        if method == 'stderr':
            logging.basicConfig(
                level=logging.DEBUG,
                format='%(asctime)s %(message)s',
            )

        elif method == 'file':
            filename = self.config.get('log', 'file.filename')
            filesize = self.config.getint('log', 'file.filesize') * 1024 ** 2
            formats = logging.Formatter('%(asctime)s %(message)s')
            handler = RotatingFileHandler(filename, maxBytes=filesize)
            handler.setLevel(logging.DEBUG)
            handler.setFormatter(formats)
            logger.addHandler(handler)

        elif method == 'syslog':
            address = self.config.getdefault('log', 'syslog.address',
                                             '/dev/log')
            facility = self.config.getdefault('log', 'syslog.facility',
                                              'daemon').lower()
            formats = logging.Formatter('yummie[%(process)d]: %(message)s')
            handler = SysLogHandler(address=address,
                                    facility=facility)
            handler.setLevel(logging.DEBUG)
            handler.setFormatter(formats)
            logger.addHandler(handler)

        else:
            raise TypeError('Invalid log method: %s' % method)

    def _package_args(self):
        return ['--exclude=%s' % ','.join(sorted(self.exclude))]

    def _repository_args(self):
        repos = []
        for option in self.config.options('repository'):
            if option.startswith('exclude'):
                repos.append(self.config.get('repository', option))
            else:
                raise ValueError('Unsupported flag in section repository: %s' %
                                 option)

        if len(repos) == 0:
            return ''
        else:
            return ['--disablerepo=%s' % ','.join(sorted(repos))]

    def _yum(self, args=[]):
        command = [
            self.config.getdefault('bin', 'yum', '/usr/bin/yum'),
            '--color=never',
        ]
        if self.option.sudo and os.geteuid() != 0:
            sudo = self.config.getdefault('bin', 'sudo', '/usr/bin/sudo')
            command.insert(0, sudo)

        command.extend(args)

        # Debugging
        logging.debug('Running:')
        command_text = textwrap.wrap(' '.join(command))
        for x in range(0, len(command_text)):
            if x == 0:
                logging.debug(command_text[x])
            else:
                logging.debug('    ' + command_text[x])

        env = os.environ.copy()
        env['COLS'] = '1000'
        pipe = subprocess.Popen(command,
                                env=env,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)

        output, self.errors = pipe.communicate()
        return pipe.returncode, output

    def check_updates(self):
        args = []
        if not self.option.no_cache:
            args.append('-C')
        args.extend(self._package_args())
        args.extend(self._repository_args())
        args.append('check-update')

        returncode, output = self._yum(args)
        self.updates = []
        prev = []
        for line in output.splitlines():
            test = self._re_package.match(line)
            if test:
                name = test.groupdict()['package']
                part = prev + line.split()
                if len(part) == 1:
                    prev = part
                    continue
                else:
                    prev = []

                if not self.excluded(name):
                    self.updates.append((
                        name,             # package name
                        part[1],          # package version
                    ))

        return returncode

    def excluded(self, name):
        for exclude in self.exclude:
            if fnmatch.fnmatch(name, exclude):
                return True
        return False

    def upgrade(self, packages):
        args = []
        args.extend(self._package_args())
        args.extend(self._repository_args())
        args.append('--obsoletes')
        args.append('-y')
        args.append('update')
        args.extend(packages)

        returncode, output = self._yum(args)
        self.updates = []
        return returncode

    def pre(self):
        try:
            pre = self.config.get('yummie', 'pre')
        except ConfigParser.NoOptionError:
            return 0

        logging.info('Running pre script: %s' % (pre))
        try:
            args = shlex.split(pre)
            # Because RedHat 6.x is still on Python 2.6
            packages = subprocess.Popen(args, stdout=subprocess.PIPE).communicate()[0].split("\n")
            for package in packages:
                if package != '':
                    self.exclude.add(package.strip('"'))
        except:
            exit(1)

    def post(self):
        try:
            post = self.config.get('yummie', 'post')
        except ConfigParser.NoOptionError:
            return 0

        temp = tempfile.NamedTemporaryFile()
        logging.info('Running post script: %s %s' % (post, temp.name))
        try:
            for line in self.updates:
                temp.write(' '.join(line))
                temp.write('\n')
            temp.seek(0)

            args = shlex.split(post)
            args.append(temp.name)
            return subprocess.call(args)
        finally:
            temp.close()


def run():
    import optparse

    parser = optparse.OptionParser()
    parser.add_option('-c', '--config', default='/etc/yum/yummie.conf',
        metavar='FILENAME',
        help='Configuration file (default: /etc/yum/yummie.conf)')
    parser.add_option('--no-cache', default=False, action='store_true',
        help='Do not used cached results (default: use cache)')
    parser.add_option('--sudo', default=False, action='store_true',
        help='Use sudo (default: no)')
    parser.add_option('-u', '--upgrade', default=False, action='store_true',
        help='Do upgrade (default: no)')
    parser.add_option('-v', '--verbose', default=False, action='store_true',
        help='Be verbose (default: no)')
    parser.add_option('--puppetlock', default=False, action='store_true',
        help="Wait for the puppet lock and acquire it")

    # Parse the command line options
    option, args = parser.parse_args()

    # Setup configuration
    config = Config(option.config)

    # Parse default options from configuration file
    for flag in ('sudo', 'upgrade', 'verbose', 'puppetlock'):
        if not getattr(option, flag) and config.has_option('yummie', flag):
            setattr(option, flag, config.getboolean('yummie', flag))

    # Set verbosity
    logger = logging.getLogger()
    if option.verbose:
        handler = logging.StreamHandler(sys.stdout)
        handler.setLevel(logging.DEBUG)
        logger.addHandler(handler)
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    # Lock puppet if requested to do so
    if option.puppetlock:
        try:
            puppetlockfile = config.get('yummie', 'lockfile', '/var/lib/puppet/state/puppetdlock')
            while os.path.exists(puppetlockfile):
                logging.info("Waiting for puppet lock")
                try:
                    fd = open(puppetlockfile, 'r')
                except IOError:
                    continue
                pid = fd.read()
                fd.close()
                try:
                    os.kill(int(pid), 0)
                except OSError:
                    # pid doesn't exist, lockfile is stale
                    break
                time.sleep(2)
            fd = open(puppetlockfile, 'w')
            fd.write(str(os.getpid()))
            fd.close()
            atexit.register(os.unlink, puppetlockfile)
        except ConfigParser.NoOptionError:
            pass

    yummie = Yummie(option, config)
    yummie.pre()
    updates = yummie.check_updates()
    if updates == 0:
        logging.info('No updates')
        return 0

    elif updates == 1:
        logging.error('Checking for updates failed:')
        for line in yummie.errors.splitlines():
            logging.error(line.rstrip())
        return 1

    if yummie.updates:
        logging.info('%d packages need updating:' % len(yummie.updates))
        for update, version in sorted(yummie.updates):
            logging.debug('    %s %s' % (update, version))

    else:
        logging.info('System up to date')
        return 0

    if not option.upgrade:
        logging.info('Skipping upgrades')
        return 0

    upgrade = yummie.upgrade([update for update, version in yummie.updates])
    if upgrade == 1:
        logging.error('There was an error doing the upgrades:')
        for line in yummie.errors.splitlines():
            logging.error(line.rstrip())
        return 1

    else:
        logging.debug('Upgrades done')
        return yummie.post()

if __name__ == '__main__':
    sys.exit(run())
